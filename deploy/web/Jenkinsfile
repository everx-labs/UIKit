G_giturl = "git@github.com:tonlabs/TON-Surf.git"
G_gitcred = 'TonJenSSH'
G_setup = "Not set"
G_install = "Not set"
G_webbuild = "Not set"
G_webdeploy = "Not set"
G_statusMergedPR = 'closed'
G_developmentBranch = 'development'
G_global_npm_path = null
G_buildImage = null

pipeline {
    agent {
        label 'linux'
    }
    parameters {
        string(name: 'BRANCH', defaultValue: 'development', description: 'Branch for the build')
        booleanParam(name: 'FORCE', defaultValue: false, description: 'MARK AS TRUE IF YOU WANT TO BUILD MANUALLY')
    }
    triggers {
        GenericTrigger(
         genericVariables: [
            [key: 'destination_branch', value: '$.pull_request.base.ref'],
            [key: 'PR_number', value: '$.number'],
            [key: 'action', value: '$.action']
         ],
         token: 'ybvclxv3ldjasb13ibv5',
         causeString: 'Merge to development branch',
         printContributedVariables: true,
         printPostContent: true,
         silentResponse: false,
        )
    }
    environment {
       PATH = "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$PATH"
       LC_ALL = "en_US.UTF-8"
       LANG = "en_US.UTF-8"
       userpass = credentials("TonJen-mac01pass")
       token = credentials("FIREBASE_UIKIT_TOKEN")
       NODE_OPTIONS = "--max-old-space-size=4096"
       GITHUB_ACCESS_TOKEN = credentials("JenkinsPackagesRW")
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
        disableConcurrentBuilds()
    }
    stages {
        stage('Prepare environment') {
            steps {
                script {
                    G_buildImage = "uikit-build-${UUID.randomUUID().toString().toLowerCase()}"
                    docker.build(G_buildImage, '--no-cache --force-rm -f deploy/dockerfiles/Dockerfile_Web deploy')
                }
            }
        }
        stage('Check the merge to development') {
            when { anyOf { environment name: 'FORCE', value: 'true'; allOf {expression { "${action}" == G_statusMergedPR}; expression { "${destination_branch}" == G_developmentBranch}}}}
            steps {
                script {
                    docker.image(G_buildImage).inside() {
                        stage('Pre-setup') {
                            G_global_npm_path = pwd()
                            try {
                                def buildCause = currentBuild.getBuildCauses()
                                echo "buildCause: ${buildCause}"
                                G_setup = "success"
                            } catch(ex) {
                                G_setup = "failure"
                                error "Pre-setup failed"
                            }
                        }
                        stage('Lerna boostrap') {
                            try {
                                sshagent (credentials: [G_gitcred]) {
                                    sh """
                                        npx lerna bootstrap && npx lerna run prepare
                                    """
                                }
                                G_install = "success"
                            } catch(ex) {
                                G_install = "failure"
                                error "Lerna boostrap failed"
                            }
                        }
                        stage('Webapp build'){
                            try {
                                sh """
                                    cd Example
                                    yarn run web:bundle
                                """
                                G_webbuild = "success"
                            } catch(ex) {
                                G_webbuild = "failure"
                                error "Lerna boostrap failed"
                            }
                        }
                        stage('Webapp deploy'){
                            try {
                                sh """
                                    yarn global add firebase-tools
                                    npm config set prefix $G_global_npm_path
                                    alias firebase="`npm config get prefix`/bin/firebase"
                                    cd Example
                                    firebase deploy --token "$token"
                                """
                                G_webdeploy = "success"
                            } catch(ex) {
                                G_webdeploy = "failure"
                                error "Webapp deploy failed"
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                cleanWs notFailBuild: true
            }
        }
    }
}
